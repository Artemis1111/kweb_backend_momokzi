import pandas as pd
from geopy.distance import geodesic
import random
from bs4 import BeautifulSoup as bs
import requests

#임의의 사용자 위치 설정 -> 나중엔 받아오기
user_location = (37.5826497929824, 127.028844976742)
distanceStd = 500 #500m 기준으로 설정
reviewCountStd = 0 #리뷰 필터 0명 기준
opentimeStd = 0 #현재 운영중
notfoodTypeStd = [] #음식종류 제한 없음
starStd = 0.0 #현재 별점 제한 없음

#어떤 좌표에 대해서 검색할 것인지
# locations500 = ((-0.0045045, 0), 
#                 (-0.0036036, -0.0027027), (-0.0036036, -0.0018018), (-0.0036036, -0.0009009), (-0.0036036, 0), (-0.0036036, 0.0009009), (-0.0036036, 0.0018018), (-0.0036036, 0.0027027),
#                 (-0.0027027, -0.0036036), (-0.0027027, -0.0027027), (-0.0027027, -0.0018018), (-0.0027027, -0.0009009), (-0.0027027, 0), (-0.0027027, 0.0009009), (-0.0027027, 0.0018018), (-0.0027027, 0.0027027), (-0.0027027, 0.0036036),
#                 (-0.0018018, -0.0036036), (-0.0018018, -0.0027027), (-0.0018018, -0.0018018), (-0.0018018, -0.0009009), (-0.0018018, 0), (-0.0018018, 0.0009009), (-0.0018018, 0.0018018), (-0.0018018, 0.0027027), (-0.0018018, 0.0036036),
#                 (-0.0009009, -0.0036036), (-0.0009009, -0.0027027), (-0.0009009, -0.0018018), (-0.0009009, -0.0009009), (-0.0009009, 0), (-0.0009009, 0.0009009), (-0.0009009, 0.0018018), (-0.0009009, 0.0027027), (-0.0009009, 0.0036036),
#                 (0, -0.0045045), (0, -0.0036036), (0, -0.0027027), (0, -0.0018018), (0, -0.0009009), (0, 0), (0, 0.0009009), (0, 0.0018018), (0, 0.0027027), (0, 0.0036036), (0, 0.0045045),
#                 (0.0009009, -0.0036036), (0.0009009, -0.0027027), (0.0009009, -0.0018018), (0.0009009, -0.0009009), (0.0009009, 0), (0.0009009, 0.0009009), (0.0009009, 0.0018018), (0.0009009, 0.0027027), (0.0009009, 0.0036036),
#                 (0.0018018, -0.0036036), (0.0018018, -0.0027027), (0.0018018, -0.0018018), (0.0018018, -0.0009009), (0.0018018, 0), (0.0018018, 0.0009009), (0.0018018, 0.0018018), (0.0018018, 0.0027027), (0.0018018, 0.0036036),
#                 (0.0027027, -0.0036036), (0.0027027, -0.0027027), (0.0027027, -0.0018018), (0.0027027, -0.0009009), (0.0027027, 0), (0.0027027, 0.0009009), (0.0027027, 0.0018018), (0.0027027, 0.0027027), (0.0027027, 0.0036036),
#                 (0.0036036, -0.0027027), (0.0036036, -0.0018018), (0.0036036, -0.0009009), (0.0036036, 0), (0.0036036, 0.0009009), (0.0036036, 0.0018018), (0.0036036, 0.0027027),
#                 (0.0045045, 0))
# locations300 = ((-0.0027027, 0),
#                 (-0.0018018, -0.0018018), (-0.0018018, -0.0009009), (-0.0018018, 0), (-0.0018018, 0.0009009), (-0.0018018, 0.0018018),
#                 (-0.0009009, -0.0018018), (-0.0009009, -0.0009009), (-0.0009009, 0), (-0.0009009, 0.0009009), (-0.0009009, 0.0018018),
#                 (0, -0.0027027), (0, -0.0018018), (0, -0.0009009), (0, 0), (0, 0.0009009), (0, 0.0018018), (0, 0.0027027),
#                 (0.0009009, -0.0018018), (0.0009009, -0.0009009), (0.0009009, 0), (0.0009009, 0.0009009), (0.0009009, 0.0018018),
#                 (0.0018018, -0.0018018), (0.0018018, -0.0009009), (0.0018018, 0), (0.0018018, 0.0009009), (0.0018018, 0.0018018),
#                 (0.0027027, 0))
locations500 = (
                (-0.0036036, -0.0018018), (-0.0036036, 0), (-0.0036036, 0.0018018),
                (-0.0018018, -0.0036036), (-0.0018018, -0.0018018), (-0.0018018, 0), (-0.0018018, 0.0018018), (-0.0018018, 0.0036036),
                (0, -0.0036036), (0, -0.0018018), (0, 0), (0, 0.0018018), (0, 0.0036036),
                (0.0018018, -0.0036036), (0.0018018, -0.0018018), (0.0018018, 0), (0.0018018, 0.0018018), (0.0018018, 0.0036036),
                (0.0036036, -0.0018018), (0.0036036, 0), (0.0036036, 0.0018018),
                )
locations300 = ((-0.0027027, 0),
                (-0.0018018, -0.0018018), (-0.0018018, -0.0009009), (-0.0018018, 0), (-0.0018018, 0.0009009), (-0.0018018, 0.0018018),
                (-0.0009009, -0.0018018), (-0.0009009, -0.0009009), (-0.0009009, 0), (-0.0009009, 0.0009009), (-0.0009009, 0.0018018),
                (0, -0.0027027), (0, -0.0018018), (0, -0.0009009), (0, 0), (0, 0.0009009), (0, 0.0018018), (0, 0.0027027),
                (0.0009009, -0.0018018), (0.0009009, -0.0009009), (0.0009009, 0), (0.0009009, 0.0009009), (0.0009009, 0.0018018),
                (0.0018018, -0.0018018), (0.0018018, -0.0009009), (0.0018018, 0), (0.0018018, 0.0009009), (0.0018018, 0.0018018),
                (0.0027027, 0))

#300, 500 중 어떤 것이냐
if distanceStd == 300:
    location_plus = locations300
else:
    location_plus = locations500

locations = []
for index in location_plus:
    locations.append((user_location[0]+index[0],user_location[1]+index[1]))

#음식점 리스트
nearby_restaurants = []

#각 좌표별로 어떤 음식점 리스트가 나오는지 딕셔너리로 정리
for location in locations:

    #어떤 좌표에서 음식점을 검색했을 때의 정보 구하기
    url = 'https://map.naver.com/p/api/search/allSearch?query=%%EC%%9D%%8C%%EC%%8B%%9D%%EC%%A0%%90&type=all&searchCoord=%s%%3B%s&boundary=' % (location[1], location[0])
    response = requests.get(url)

    if response.status_code == 200:
        data = response.json()
        data = data["result"]["place"]["list"]

        for original_data in data:
            # 여기 쓰여진 정보만 가져오기
            keys_to_extract = ["id", "name", "category", "businessStatus", "y", "x", "reviewCount", "placeReviewCount"]
            new_restaurant = {key: original_data[key] for key in keys_to_extract if key in original_data}
            #중복데이터면 제거
            if new_restaurant in nearby_restaurants:
                continue
            nearby_restaurants.append(new_restaurant)
    else:
        print("요청 실패:", response.status_code)


#거리 계산 및 필터링
def filter_restaurants(row):
    restaurant_location = (row['y'], row['x'])
    return geodesic(user_location, restaurant_location).meters <= distanceStd

#dataFrame으로 만들기
df = pd.DataFrame(nearby_restaurants)

#review 합치기
df["reviewCount"] += df["placeReviewCount"]
df.drop("placeReviewCount", axis=1, inplace=True)

#운영시간 정보 추출
df["businessStatus"] = df["businessStatus"].apply(lambda x: x['businessHours'])



#500m 이내의 식당만 필터링
nearby_restaurants = df[df.apply(filter_restaurants, axis=1)]


print(nearby_restaurants["name"])

